// matrix.cg - simple cg fragment shader
struct vert2frag {
	float4 color	: COLOR0;
	
	float3 pos		: TEXCOORD0;
	float3 normal	: TEXCOORD1;
	float3 lightPos	: TEXCOORD2;
	float3 lightVec	: TEXCOORD3;

	// material
	float4 ambient	: TEXCOORD4;
	float4 diffuse	: TEXCOORD5;
	float4 specular : TEXCOORD6;
	float4 emission : TEXCOORD7;
};

#define PI 3.14159265358979323846

float4 main(vert2frag IN) : COLOR {
	float3 l = normalize(IN.lightVec);
	float3 n = normalize(IN.normal); 
	
	float3 eye = normalize(-IN.pos);
    float3 h = normalize(l + eye);

	// Compute the diffuse and specular coefficients
	//  the diffuse cosine is in coeffs.y, the specular is in coeffs.z
	float4 coeffs = lit(dot(n, l), dot(n, h), 32);

	float3 color = IN.color.xyz;

	return float4(color * coeffs.y
		+ IN.specular * coeffs.z,
		IN.color.w);
}
